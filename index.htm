<!DOCTYPE html>
<!-- saved from url=(0060)http://www.jerome-baudoux.com/stuff/bbl/samples/4/index.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WebGL</title>
<meta charset="utf-8">
<style>
* {
border: 0;
margin: 0;
padding: 0;
overflow: hidden;
}
</style>
<script src="three.min.js"></script>
<script src="OrbitControls.js"></script>

<script src='THREEx.WindowResize.js'></script>

<script id="vertexShader" type="x-shader/x-vertex">

	uniform float time;
	uniform float random;

	// To interpolate for the Pixel
	varying vec2 vUv;
	attribute float displacement;

	void main() {

		// Do nothing fancy here
		vUv = uv;
										 
		// displacement = b;
		vec3 newPosition = position + 
							normal * 
							vec3( cos(time) * 3.0);
		//vec3(displacement);
		
		// Simple projection
		vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0);
		gl_Position = projectionMatrix * mvPosition  ;
		
	}
</script>

<script id="pixelShader" type="x-shader/x-fragment">

	// Param
	uniform float time;
	uniform float random;

	uniform sampler2D texture;
	
	// Interpolated from Vertex
	varying vec2 vUv;

	void main( void ) {
	
		// Change the texture coordinate depending on the time
		// The coordinate recieved here are already interpolated
		vec2 uv;
		uv.x = vUv.x;
		uv.y = vUv.y * 5.0 / 6.0 +    vUv.y * sin(time)*cos(time) / 6.0 ;
				
		vec3 color = texture2D(texture, uv).rgb;
		
		float red = texture2D(texture, uv).rgb.r ; 
		
		 gl_FragColor = vec4(red, texture2D(texture, uv).rgb.g, texture2D(texture, uv).rgb.b, 1.0);
	}

</script>



<script>



function webGLStart() {
	
	var width = 600;
	var height = 600;
	var camera, control, scene, renderer;
	var earth, moon, sun, uniforms1;
	var mars;
	var hourCount=0;


	var angularSpeed = 0.05; 
	var lastTime = 0;
	var start = Date.now();
	var sizeSphere = 40;
	var factorMoonToEarth= 8;
	var factorMarsToEarth= 2;
	var factorEarthToSun= 1;
	var betweenEarthToMon = 50;
	var betweenEarthToSun = 500;
	var betweenMarsToSun = 600;

	var factorElipse = 1.3;
	
	var positionSunX = 0;
	var factorLength=1;
	
	var timeLast;
	var nbLoop = 0;
	var mouseDown=false;
	var mouseX, mouseY;
	var objectCenter=83;
	var centerOnObject=false;
	var posZcamZoom=1000;
	
	var withShadow=false;
	
	function initEarth() {
		

		renderer = new THREE.WebGLRenderer({		
			antialias:true
		});
		
		renderer.setClearColor(0x000000, 1);

		if (withShadow) {
			renderer.shadowMapEnabled = true;
			renderer.shadowMapSoft = true;
		}
		renderer.setSize(window.innerWidth, window.innerHeight);
		document.body.appendChild(renderer.domElement);

		// camera
		camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 5000);
		camera.position.z = 1000;


		// scene
		scene = new THREE.Scene();
		
		
		if (withShadow) {
			// material
			var material = new THREE.MeshLambertMaterial({
				map: THREE.ImageUtils.loadTexture('earthmap1k.jpg') ,
				bumpMap:  THREE.ImageUtils.loadTexture('earthbump1k.jpg'),
				bumpScale: 5
				//,
				//transparent: true,
				//opacity: 1
			});
			material.specularMap    = THREE.ImageUtils.loadTexture('earthspec1k.jpg')
			material.specular  = new THREE.Color('grey');
			
			var materialMoon= new THREE.MeshLambertMaterial({
				map: THREE.ImageUtils.loadTexture('moonmap1k.jpg')
				, bumpMap:  THREE.ImageUtils.loadTexture('moonbump1k.jpg'),
				bumpScale: 0.5

			});
			
			var materialMars= new THREE.MeshLambertMaterial({
				map: THREE.ImageUtils.loadTexture('marsmap1k.jpg')
				, bumpMap:  THREE.ImageUtils.loadTexture('marsbump1k.jpg'),
				bumpScale: 5

			});
			
		} else {
		// material
			var material = new THREE.MeshBasicMaterial({
				map: THREE.ImageUtils.loadTexture('earthmap1k.jpg') ,
				bumpMap:  THREE.ImageUtils.loadTexture('earthbump1k.jpg'),
				bumpScale: 5
			});
			material.specularMap    = THREE.ImageUtils.loadTexture('earthspec1k.jpg')
			material.specular  = new THREE.Color('grey');
			
			var materialMoon= new THREE.MeshBasicMaterial({
				map: THREE.ImageUtils.loadTexture('moonmap1k.jpg')
				, bumpMap:  THREE.ImageUtils.loadTexture('moonbump1k.jpg'),
				bumpScale: 0.5

			});
			
			var materialMars= new THREE.MeshBasicMaterial({
				map: THREE.ImageUtils.loadTexture('marsmap1k.jpg')
				, bumpMap:  THREE.ImageUtils.loadTexture('marsbump1k.jpg'),
				bumpScale: 5

			});
		}
		
		
		
		var textureSun = THREE.ImageUtils.loadTexture('700328main_20121014_003615_flat.jpg');
		
		// Paramters
		uniforms1 = {
			time: { type: "f", value: 1.0 },
			random: { type: "f", value: 1.0 },
			texture: { type: "t", value: textureSun }
		};
					
		
		// Setup of the shader material
		var materialSun = new THREE.ShaderMaterial( {
			uniforms: uniforms1,
		///	map: THREE.ImageUtils.loadTexture('700328main_20121014_003615_flat.jpg')
			vertexShader: document.getElementById( 'vertexShader' ).textContent,
			fragmentShader: document.getElementById( 'pixelShader' ).textContent,
			map: textureSun
		});
		
		
		// earth
		
		earth = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere, 50, 50), material);
		moon = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere/factorMoonToEarth, 20, 20), materialMoon);
		mars = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere/factorMarsToEarth, 50, 50), materialMars);

		if (withShadow) {
			earth.receiveShadow = true;
			moon.receiveShadow = true;
			earth.castShadow = true;
			moon.castShadow = true;
		}
		
		// earth = new THREE.Mesh(new THREE.CubeGeometry(200, 200, 200), material);
		earth.position.x = positionSunX + betweenEarthToSun;
		//earth.overdraw = true;
		earth.rotation.x = Math.PI * 0.1;
		moon.position.x =  betweenEarthToMon*factorLength/2;	
		moon.position.y =  0;	
		moon.position.z =  betweenEarthToMon*factorLength/2;	
		
		earth.add(moon);
		earth.rotation.x += Math.PI / 6;

		
		
		scene.add(earth);
		
		mars.position.x = positionSunX - betweenMarsToSun;
		
		scene.add(mars);

		
		sun  = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere*factorEarthToSun, 50, 50), materialSun);
		sun.position.x = positionSunX;
		sun.position.z = 0;
		sun.position.y = 0;
		scene.add(sun);
		
	if (withShadow) {
		var lightA = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightA.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightA.castShadow = true;
		lightA.shadowCameraVisible = false;

		lightA.target.position.set( 0, 0, 100 );
				
		//lightA.target=earth;

		lightA.shadowDarkness = 0.75
		scene.add( lightA );
		
		var lightB = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightB.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightB.castShadow = true;
		lightB.shadowCameraVisible = false;

		lightB.target.position.set( 100* Math.cos(Math.PI / 6), 0, 100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightB.shadowDarkness = 0.75
		scene.add( lightB );

		
		var lightC = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightC.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightC.castShadow = true;
		lightC.shadowCameraVisible = false;

		lightC.target.position.set( 100* Math.cos(Math.PI / 6),0,  -100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightC.shadowDarkness = 0.75
		scene.add( lightC );

		var lightD = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightD.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightD.castShadow = true;
		lightD.shadowCameraVisible = false;

		lightD.target.position.set( 0, 0, -100 );
				
		//lightA.target=earth;

		lightD.shadowDarkness = 0.75
		scene.add( lightD );

		var lightE = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightE.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightE.castShadow = true;
		lightE.shadowCameraVisible = false;

		lightE.target.position.set( -100* Math.cos(Math.PI / 6), 0, -100* Math.sin(Math.PI / 6));
				
		//lightA.target=earth;

		lightE.shadowDarkness = 0.75
		scene.add( lightE );

		var lightF = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightF.position.set(positionSunX  , sun.position.y, sun.position.z );
		
		lightF.castShadow = true;
		lightF.shadowCameraVisible = false;

		lightF.target.position.set( -100* Math.cos(Math.PI / 6), 0, 100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightF.shadowDarkness = 0.75
		scene.add( lightF );
	} else {
			// var light = new THREE.PointLight( 0xffffff, 1, 0 );
	//	var light = new THREE.PointLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
		//scene.add( light );
	}
	     //var ambientLight = new THREE.AmbientLight(0x222222);
      //scene.add(ambientLight);
      
		//scene.add( lightSpot );
		THREEx.WindowResize(renderer, camera);
		
		// when the mouse moves, call the given function
		document.addEventListener( 'mousemove', onMouseMove, false );
		document.addEventListener( 'mouseup', onMouseUp, false );
		document.addEventListener( 'mousedown', onMouseDown, false );
		document.addEventListener( 'keydown', onDocumentKeyDown, false );

}



function onDocumentKeyDown(event){
	var delta = 200;
	event = event || window.event;
	var keycode = event.keyCode;
	switch(keycode){
	case 37 : //left arrow 
	camera.position.x = camera.position.x - delta;
	break;
	case 38 : // up arrow Âêë
	camera.position.z = camera.position.z - delta;
	posZcamZoom = camera.position.z;
	break;
	case 39 : // right arrow
	camera.position.x = camera.position.x + delta;
	break;
	case 40 : //down arrow
	camera.position.z = camera.position.z + delta;
	posZcamZoom = camera.position.z;
	break;
	case 83 : //'S'
	case 69 :
	case 77 :
		objectCenter=keycode;
		//camera.position.z = 1000;
		break;
	case 67 :
		if (centerOnObject) {
			centerOnObject=false;
			factorLength=1;
		} else {
			centerOnObject=true;
			factorLength=1;
		}
		break;
	 case 68 :
	 centerOnObject=false;
	factorLength=1;

	 break;
	}
	
	
}


	
	 function onMouseMove(evt) {
        if (!mouseDown) {
            return;
        }

        evt.preventDefault();

        var deltaX = evt.clientX - mouseX,
            deltaY = evt.clientY - mouseY;
        mouseX = evt.clientX;
        mouseY = evt.clientY;
        camera.position.x -= deltaX;
		camera.position.y += deltaY;
    }

    function onMouseDown(evt) {
        evt.preventDefault();

        mouseDown = true;
        mouseX = evt.clientX;
        mouseY = evt.clientY;
    }

    function onMouseUp(evt) {
        evt.preventDefault();

        mouseDown = false;
    }

	
	
	// this function is executed on each animation frame
	function animate(){
		// update
		var time = (new Date()).getTime();
		var timeDiff = time - lastTime;
		
		var angleChange = angularSpeed * timeDiff * 2 / 100;
		
		hourCount += angleChange;
		earth.rotation.y += angleChange  * Math.PI;
		//sun.rotation.y += angleChange;
		var dayCount = hourCount/24;
		
		var angleOrbit  = dayCount * Math.PI ;
	
		earth.position.x = sun.position.x + betweenEarthToSun * factorElipse * Math.sin(angleOrbit ) * factorLength;
		earth.position.z = sun.position.z + betweenEarthToSun * Math.cos(angleOrbit) * factorLength;
	
		mars.position.x = sun.position.x + betweenMarsToSun *  factorElipse * Math.cos(angleOrbit / 2) * factorLength;
		mars.position.z = sun.position.z + betweenMarsToSun * Math.sin(angleOrbit / 2 ) * factorLength;
	
	
	
		moon.rotation.y += angleChange  * Math.PI / 5;
		moon.position.x = betweenEarthToMon * Math.sin(moon.rotation.y) * factorLength;
		moon.position.z = betweenEarthToMon * Math.cos(moon.rotation.y) * factorLength;
		
         var objectPosZ = 2000;		
	   switch(objectCenter){
	   case 83 :  //'S' 
			camera.position.x = sun.position.x;
			camera.position.y  = sun.position.y;
			objectPosZ = sun.position.z;
			break;
			
		case 69 :  //'E' 
			camera.position.x = earth.position.x;
			camera.position.y  = earth.position.y;
			objectPosZ = earth.position.z;
			break;

		case 77 :  //'M' 
			camera.position.x = earth.position.x + moon.position.x;
			camera.position.y  = earth.position.y +  moon.position.y;
			objectPosZ = earth.position.z +  moon.position.z;
			break;
	   
	   }
	   
	   if (centerOnObject) {
			camera.position.z = objectPosZ;
		} else {
			camera.position.z = posZcamZoom;
		}
	   if (nbLoop > 10) {
			timeLast = (Date.now()-start) / 5000;

			uniforms1.time.value = (Date.now()-start) / 5000;
			uniforms1.random.value = Math.random();
			nbLoop=0;
		}   
		nbLoop++;

        lastTime = time;
	   	
		renderer.render(scene, camera);

		// request new frame
		requestAnimationFrame(animate);
	}
	
	initEarth();
	
	animate();
};
</script>
</head>
<body onload="webGLStart();">


</body></html>