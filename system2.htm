<!DOCTYPE html>
<!-- saved from url=(0060)http://www.jerome-baudoux.com/stuff/bbl/samples/4/index.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WebGL</title>
<meta charset="utf-8">
<style>
* {
border: 0;
margin: 0;
padding: 0;
overflow: hidden;
}
</style>
<script src="http://www.html5canvastutorials.com/libraries/three.min.js"></script>


<script id="vertexShader" type="x-shader/x-vertex">

			// To interpolate for the Pixel
			varying vec2 vUv;
			attribute float displacement;

			void main() {
			
				// Do nothing fancy here
				vUv = uv;
				
				
				    vec3 newPosition = position + 
                       normal * 
                       vec3(displacement);
				
				// Simple projection
				vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0);
				gl_Position = projectionMatrix * mvPosition  ;
				
}



		</script>
		
		<script id="pixelShader" type="x-shader/x-fragment">

			// Param
			uniform float time;
			uniform sampler2D texture;
			
			// Interpolated from Vertex
			varying vec2 vUv;

			void main( void ) {
			
				// Change the texture coordinate depending on the time
				// The coordinate recieved here are already interpolated
				vec2 uv;
				uv.x = vUv.x;
				//int temps= Math.round(time);;
			//	float modulo = (( ) + 1 ) / 10;
				uv.y = vUv.y * 5.0 / 6.0 +    vUv.y * sin(time)*sin(time)/ 6.0 ;

				
				vec2 uv2;
				uv2.x = vUv.x; // / 2.0 +    vUv.x * abs(cos(time)) / 2.0 ; 
				uv2.y = vUv.y;
				
				// Color of the pixel
				//var colorRGB = texture2D(texture, uv).rgb;
				//if (colorRGB.r > 50 ) 
				//	colorRGB.r = (colorRGB.r  + s; 
				// 	
				vec3 color = texture2D(texture, uv).rgb;
				
				float red = texture2D(texture, uv).rgb.r ; 
			//	 red  = red / 2.0  + (red *  abs(sin(time))) / 2.0 ;
 				// red  = red / 2.0  +texture2D(texture, uv2).rgb.r  / 2.0 ;

			//	 red  = red *  abs(sin(time)) ;
				
				//gl_FragColor = vec4(color , 1.0);
				 gl_FragColor = vec4(red, texture2D(texture, uv).rgb.g, texture2D(texture, uv).rgb.b, 1.0);
			}

		</script>



<script>



function webGLStart() {
	
	var width = 600;
	var height = 600;
	var camera, scene, renderer, mesh1, mesh2, earthMesh;
	var earth, sphere, moon, sun, uniforms1;
	/**
				* Executed once
				*/
	var neheTexture;

	var angularSpeed = 0.05; 
	var lastTime = 0;
	var start = Date.now();
	var sizeSphere = 40;
	var betweenEathToMon = 80;
	var betweenEathToSun = 200;
	var positionSun = 0;
	
	var timeLast;
	
	function initEarth() {
		
		
		renderer = new THREE.WebGLRenderer({		
			antialias:true
		});
		
		renderer.setClearColor(0x000000, 1);

		renderer.shadowMapEnabled = true;
		renderer.shadowMapSoft = true;
		
		renderer.setSize(window.innerWidth, window.innerHeight);
		document.body.appendChild(renderer.domElement);

		// camera
		camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
		camera.position.z = 500;

		// scene
		scene = new THREE.Scene();
		
		// material
		var material = new THREE.MeshLambertMaterial({
			map: THREE.ImageUtils.loadTexture('earthmap1k.jpg') ,
			bumpMap:  THREE.ImageUtils.loadTexture('earthbump1k.jpg'),
			bumpScale: 5
			//,
			//transparent: true,
			//opacity: 1
		});
		material.specularMap    = THREE.ImageUtils.loadTexture('earthspec1k.jpg')
		material.specular  = new THREE.Color('grey');
		
		var materialMoon= new THREE.MeshLambertMaterial({
			map: THREE.ImageUtils.loadTexture('moonmap1k.jpg')
			, bumpMap:  THREE.ImageUtils.loadTexture('moonbump1k.jpg'),
			bumpScale: 0.5

		});
		
		
	//	var materialSun= new THREE.MeshBasicMaterial({
		//				map: textureSun

		//});
		
		var textureSun = THREE.ImageUtils.loadTexture('700328main_20121014_003615_flat.jpg');
		
		// Paramters
		uniforms1 = {
			time: { type: "f", value: 1.0 },
			texture: { type: "t", value: textureSun }
		};
					
		
		// Setup of the shader material
		var materialSun = new THREE.ShaderMaterial( {
			uniforms: uniforms1,
		///	map: THREE.ImageUtils.loadTexture('700328main_20121014_003615_flat.jpg')
			vertexShader: document.getElementById( 'vertexShader' ).textContent,
			fragmentShader: document.getElementById( 'pixelShader' ).textContent,
			map: textureSun
		});
		
		
		// earth
		earth = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere, 50, 50), material);
		moon = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere/4, 20, 20), materialMoon);
		earth.receiveShadow = true;
		moon.receiveShadow = true;
		earth.castShadow = true;
		moon.castShadow = true;

		
		// earth = new THREE.Mesh(new THREE.CubeGeometry(200, 200, 200), material);
		earth.position.x = positionSun + betweenEathToSun;
		earth.overdraw = true;
		earth.rotation.x = Math.PI * 0.1;
		moon.position.x =  earth.position.x + betweenEathToMon;	
		
		earth.rotation.x += Math.PI / 6;
		
		
		scene.add(moon);
		scene.add(earth);
		


		
		sun  = new THREE.Mesh(new THREE.SphereGeometry(sizeSphere, 50, 50), materialSun);
		sun.position.x = positionSun;
		sun.position.z = 0;
		sun.position.y = 0;
				scene.add(sun);

		var lightA = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightA.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightA.castShadow = true;
		lightA.shadowCameraVisible = false;

		lightA.target.position.set( 0, 0, 100 );
				
		//lightA.target=earth;

		lightA.shadowDarkness = 0.75
		scene.add( lightA );
		
		var lightB = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightB.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightB.castShadow = true;
		lightB.shadowCameraVisible = false;

		lightB.target.position.set( 100* Math.cos(Math.PI / 6), 0, 100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightB.shadowDarkness = 0.75
		scene.add( lightB );

		
		var lightC = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightC.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightC.castShadow = true;
		lightC.shadowCameraVisible = false;

		lightC.target.position.set( 100* Math.cos(Math.PI / 6),0,  -100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightC.shadowDarkness = 0.75
		scene.add( lightC );

		var lightD = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightD.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightD.castShadow = true;
		lightD.shadowCameraVisible = false;

		lightD.target.position.set( 0, 0, -100 );
				
		//lightA.target=earth;

		lightD.shadowDarkness = 0.75
		scene.add( lightD );

		var lightE = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightE.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightE.castShadow = true;
		lightE.shadowCameraVisible = false;

		lightE.target.position.set( -100* Math.cos(Math.PI / 6), 0, -100* Math.sin(Math.PI / 6));
				
		//lightA.target=earth;

		lightE.shadowDarkness = 0.75
		scene.add( lightE );

		var lightF = new THREE.SpotLight( 0xffffff, 1, 0,  Math.PI / 3, 10  );
	
		lightF.position.set(positionSun  , sun.position.y, sun.position.z );
		
		lightF.castShadow = true;
		lightF.shadowCameraVisible = false;

		lightF.target.position.set( -100* Math.cos(Math.PI / 6), 0, 100* Math.sin(Math.PI / 6) );
				
		//lightA.target=earth;

		lightF.shadowDarkness = 0.75
		scene.add( lightF );
	
		
		//scene.add( lightSpot );

	}
	
	// this function is executed on each animation frame
	function animate(){
		// update
		var time = (new Date()).getTime();
		var timeDiff = time - lastTime;
		
		var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;
		earth.rotation.y += angleChange;
		//sun.rotation.y += angleChange;
	
		earth.position.x = sun.position.x + betweenEathToSun * Math.sin(earth.rotation.y  ) ;
		earth.position.z = sun.position.z + betweenEathToSun * Math.cos(earth.rotation.y ) ;
	
	
		moon.position.x = earth.position.x + betweenEathToMon * Math.sin(earth.rotation.y /*/28	*/ ) ;
		moon.position.z = earth.position.z + betweenEathToMon * Math.cos(earth.rotation.y /*/28 */) ;
		 moon.rotation.y += angleChange/28;

		if (timeLast != ((Date.now()-start) / 5000)) {
			uniforms1.time.value = (Date.now()-start) / 5000;
			timeLast = (Date.now()-start) / 5000;
		}   
        lastTime = time;
	   
		// render
		renderer.render(scene, camera);

		// request new frame
		requestAnimationFrame(animate);
	}
	
	initEarth();
	
	animate();
};
</script>
</head>
<body onload="webGLStart();">


</body></html>